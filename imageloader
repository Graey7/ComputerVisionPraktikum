import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk
import seamcarver

class imageloader:
    def __init__(self, root):
        self.root = root
        self.setup_ui()
    
    def setup_ui(self):
        # Create the main frame
        self.main_frame = tk.Frame(self.root)
        self.main_frame.pack()
        
        # Add a label and entry field for the number of seams
        tk.Label(self.main_frame, text='Number of seams:').pack()
        self.num_seams_entry = tk.Entry(self.main_frame)
        self.num_seams_entry.pack()
        
        # Add a button for selecting the image file
        tk.Button(self.main_frame, text='Select Image', command=self.select_image).pack()
        
        # Add a label and canvas for displaying the image
        tk.Label(self.main_frame, text='Original Image:').pack()
        self.image_canvas = tk.Canvas(self.main_frame, width=400, height=400)
        self.image_canvas.pack()
        
        # Add a button for running the seam carving algorithm
        tk.Button(self.main_frame, text='Run Seam Carving', command=self.run_seam_carving).pack()
        
        # Add a label and canvas for displaying the modified image
        tk.Label(self.main_frame, text='Modified Image:').pack()
        self.modified_image_canvas = tk.Canvas(self.main_frame, width=400, height=400)
        self.modified_image_canvas.pack()
    
    def select_image(self):
        # Open a file dialog for selecting the image file
        self.image_path = filedialog.askopenfilename()
        
        # Load the image and display it on the canvas
        self.image = Image.open(self.image_path)
        self.display_image(self.image, self.image_canvas)
    
    def run_seam_carving(self):
        # Get the number of seams from the entry field
        num_seams = int(self.num_seams_entry.get())
        
        # Run the seam carving algorithm
        modified_image = seamcarver.seam_carving(self.image, num_seams)
        
        # Display the modified image on the canvas
        self.display_image(modified_image, self.modified_image_canvas)
    
    def display_image(self, image, canvas):
        # Resize the image to fit the canvas
        image = image.resize((400, 400), Image.ANTIALIAS)
        
        # Convert the image to a PhotoImage object
        image = ImageTk.PhotoImage(image)
        
        # Clear the canvas
        canvas.delete('all')
        
        # Add the image to the canvas
        canvas.create_image(200, 200, image=image)
       